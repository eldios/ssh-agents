#! /usr/bin/env bash
#
# vim: sw=2 ts=2 sts=0 noet
#
# MIT License
#
# Copyright (c) 2018 Wael Nasreddine <github@yl.codes>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

set -euo pipefail

readonly version="1.1.0"

function debug() {
	if [[ "${debug}" == "true" ]]; then
		echo "# ${*}"
	fi
}

function check_agent_status() {
	# Exit status of ssh-add
	#   0 means the agent exists and has keys,
	#   1 means the agent exists but has no keys, and
	#   2 means agent does not exist.
	set +e
	ssh-add -l >/dev/null 2>&1
	agent_status=$?
	set -e
	echo ${agent_status}
}

# start the SSH agent
function start_ssh_agent() {
	# No. Try to get the environment variables from the file.
	if [[ -f "${SSH_AGENT_FILE}" ]]; then
		debug "${SSH_AGENT_FILE} does exist, trying to load the agent from it"
		eval "$(grep -v echo "${SSH_AGENT_FILE}")"
	fi

	local agent_status
	agent_status=$(check_agent_status)
	debug "agent_status=${agent_status}"

	if [[ "${agent_status}" -eq 2 ]]; then
		# No.  Start an ssh-agent, saving the environment variables.
		if ! ssh-agent -s >"${SSH_AGENT_FILE}"; then
			echo "# Failed to start the ssh-agent." >&2
			exit 1
		fi
	fi

	eval "$(grep -v echo "${SSH_AGENT_FILE}")"

	if [[ "${is_init}" == "true" && "${agent_status}" -eq 0 ]]; then
		debug "Nothing to do.. our agents exists and has keys already"
		return
	fi

	if [[ "${add_ssh_keys}" == "true" ]]; then
		debug "Adding all keys found in ~/.ssh"
		add_keys_from_src ~/.ssh
	fi

	if [[ "${ssh_keys_source}" != "" ]]; then
		debug "Adding key(s) found in ${ssh_keys_source}"
		add_key "${ssh_keys_source}"
	fi
}

# add keys from file or dir
function add_keys_from_src() {
	# Add all of the keys
	local key_src="${1}"
	local key=""
	local find_cmd=""
	if [[ -d "${key_src}" ]]; then
		find_cmd="find ${key_src} -mindepth 1 -maxdepth 1"
	else
		find_cmd='find '"$(dirname ${key_src})"' -mindepth 1 -maxdepth 1'
	fi
	for key in $(${find_cmd}); do
		debug "found a file located at ${key}"

		add_key "${key}"
	done
}

# export the variables to the environment
function add_key() {
	local key="${1}"
	debug "checking if ${key} is an actual key"
	if grep -q 'PRIVATE KEY' "${key}" >/dev/null >&2; then
		debug "confirmed ${key} seems to be an actual key"

		debug "checking if keyfile ${key} has been already added successfully to the agent"
		_fingerprint_new_key="$(ssh-keygen -f ${key} -l | awk '{print $2}')"
		_skip_key="false"
		set +e
		ssh-add -l >/dev/null 2>&1
		_agent_code="$?"
		set -e
		if [[ "${_agent_code}" == "0" ]]; then
			_keys_in_agent="$(ssh-add -l | awk '{print $2}')"
			if echo "${_keys_in_agent}" | grep -q "${_fingerprint_new_key}" >/dev/null >&2; then
				debug "key is already present in ssh-agent, skipping"
				_skip_key="true"
			fi
		fi

		if [[ "${_skip_key}" == "false" ]]; then
			debug "adding the key ${key}"
			set +e
			if [[ "${confirm_mode}" == "true" ]]; then
				ssh-add -c "${key}" </dev/null >/dev/null 2>&1
			else
				ssh-add "${key}" </dev/null >/dev/null 2>&1
			fi
			set -e
		else
			debug "${key} key skipped"
		fi
	else
		debug "file ${key} doesn't seem to be a PRIVATE KEY"
	fi
}

# export the variables to the environment
function export_env() {
	# Print commands to setup environment.  This handles tcsh and
	# assumes everyone else can understand sh syntax (bash, ksh, zsh
	# and maybe others).  Other folks can add detection for more
	# esoteric shells as needed.
	if [ "${SHELL##*/}" = "tcsh" ]; then
		for var in "$@"; do
			if [ -n "${!var}" ]; then
				echo "setenv $var ${!var};"
			fi
		done
	elif [ "${SHELL##*/}" = "fish" ]; then
		for var in "$@"; do
			if [ -n "${!var}" ]; then
				echo "set -Ux $var ${!var};"
			fi
		done
	else
		for var in "$@"; do
			if [ -n "${!var}" ]; then
				echo "$var=${!var}; export $var;"
			fi
		done
	fi
}

function help() {
	cat <<EOD >&2
USAGE: ssh-agents
	[-h|--help]          : print this help message
	[-v|--version]       : print version and exit
	[-d|--debug]         : enable debugging logs
	[-i|--init]          : set this execution as init (usually in .bashrc / .zshrc)
	[-n|--name]          : set the name for ssh-agents
	[-c|--confirm]       : enable confirmation for SSH keys
	[-A|--add-ssh-keys]  : add all keys in ~/.ssh
	[-a|--add] <KEY|DIR> : add keys. Can be used in two ways:
		KEY: specify one key to add
		DIR: add all keys in a directory

Start or attahes to an already existing SSH agent. The default name is 'global'
and the agent state will be saved at ${HOME}/.ssh/agent and all the keys
directly under ${HOME}/.ssh will be added automatically, provided they are
not encrypted... in which case it will ask for a password.

Changing the SSH agent name with the flag -n or --name, would put the agent
under ${HOME}/.ssh/${SSH_AGENT_NAME}/agent and all the keys directly under
${HOME}/.ssh/${SSH_AGENT_NAME} will be added automatically, provided they are
not encrypted... in which case it will ask for a password.

WARNING[1]: Specify -c or --confirm if you want to confirm SSH keys
  usage when requested via SSH AGENT (STRONGLY ADVISED).

WARNING[2]: Right now only SSH keys in RFC42216 format are accepted,
  but that's the default OpenSSH format so that's probably okay.

NOTE: you should add a line to your .basrc / .zshrc, to activate \`ssh-agents\`.

  if you want to automatically add one key, just add:
    eval \$(~/bin/ssh-agents -i -c -a ~/.ssh/id_ed25519)

  if you want to add all keys contained in '~/.ssh/':
    eval \$(~/bin/ssh-agents -i -c -A)
EOD
}

debug=false
agent_name=global
is_init=false
confirm_mode=""
add_ssh_keys=""
ssh_keys_source=""

while [[ $# -ge 1 ]]; do
	case "${1}" in
	-h | --help)
		help
		exit 0
		;;
	-v | --version)
		echo "ssh-agents v${version}"
		exit 0
		;;
	-d | --debug)
		debug=true
		shift
		;;
	-i | --init)
		is_init=true
		shift
		;;
	-n | --name)
		shift
		if [[ "${#}" -eq 0 ]]; then
			>&2 echo "ERR: --name requires an argument"
			exit 1
		fi
		agent_name="${1}"
		shift
		;;
	-A | --add-ssh-keys)
		add_ssh_keys=true
		shift
		;;
	-a | --add)
		shift
		if [[ "${#}" -eq 0 ]]; then
			>&2 echo "ERR: --add requires an argument, pointing to an SSH key or dir"
			exit 1
		fi
		ssh_keys_source="${1}"
		shift
		;;
	-c | --confirm)
		confirm_mode=true
		shift
		;;
	*)
		echo "${1} parameter was given but is not supported"
		exit 1
		;;
	esac
done

# Forget any currently running agent
unset SSH_AGENT_NAME SSH_AGENT_PID SSH_AUTH_SOCK

# no SSH_AGENT_NAME? Hardcode it to global
readonly SSH_AGENT_NAME="${agent_name}"

# compute the path of ssh agent file
if [[ "${SSH_AGENT_NAME}" == "global" ]]; then
	readonly SSH_AGENT_FILE="${HOME}/.ssh/agent"
else
	readonly SSH_AGENT_FILE="${HOME}/.ssh/${SSH_AGENT_NAME}/agent"
fi
if [[ ! -w "$(dirname ${SSH_AGENT_FILE})" ]]; then
	# do not spawn an agent if we cannot write to the base directory of the
	# ssh agent file.
	exit
fi

# start the SSH agent (noop if it's already started)
start_ssh_agent

# export the variables required to access the SSH agent
export_env SSH_AGENT_NAME SSH_AGENT_PID SSH_AUTH_SOCK
