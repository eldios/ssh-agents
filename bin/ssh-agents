#! /usr/bin/env bash
#
# vim: sw=2 ts=2 sts=0 noet
#
# MIT License
#
# Copyright (c) 2018 Wael Nasreddine <github@yl.codes>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

set -euo pipefail

readonly version="1.0.0"

function debug() {
	if [[ "${debug}" == "true" ]]; then
		echo "${@}"
	fi
}

# start the SSH agent
function start_ssh_agent() {
	# No. Try to get the environment variables from the file.
	if [[ -f "${SSH_AGENT_FILE}" ]] ; then
		debug "${SSH_AGENT_FILE} does exist, trying to load the agent from it"
		eval "$( grep -v echo "${SSH_AGENT_FILE}" )"
	fi

	# Exit status of ssh-add
	#   0 means the agent exists and has keys,
	#   1 means the agent exists but has no keys, and
	#   2 means agent does not exist.
	set +e
	ssh-add -l > /dev/null 2>&1
	agent_status=$?
	set -e
	debug "agent_status=${agent_status}"

	# Does our environment point to an agent now?
	if [[ "${agent_status}" -eq 2 ]]; then
		# No.  Start an ssh-agent, saving the environment variables.
		if ! ssh-agent -s > "${SSH_AGENT_FILE}"; then
			echo "Failed to start the ssh-agent." >&2
			exit 1
		fi
		eval "$( grep -v echo "${SSH_AGENT_FILE}" )"
	fi

	# Add all of the keys
	local key=
	for key in $(find "$(dirname "${SSH_AGENT_FILE}")" -mindepth 1 -maxdepth 1); do
		debug "found a file located at ${key}"
		if grep -q 'PRIVATE KEY' "${key}" >/dev/null >&2; then
			debug "adding the key ${key}"
			chmod 0400 "${key}" >/dev/null 2>&1
			ssh-add "${key}" </dev/null >/dev/null 2>&1
		fi
	done
}

# export the variables to the environment
function export_env() {
	# Print commands to setup environment.  This handles tcsh and
	# assumes everyone else can understand sh syntax (bash, ksh, zsh
	# and maybe others).  Other folks can add detection for more
	# esoteric shells as needed.
	if [ "${SHELL##*/}" = "tcsh" ] ; then
		for var in $* ; do
			if [ -n "${!var}" ] ; then
				echo "setenv $var ${!var};"
			fi
		done
	elif [ "${SHELL##*/}" = "fish" ] ; then
		for var in $* ; do
			if [ -n "${!var}" ] ; then
				echo "set -Ux $var ${!var};"
			fi
		done
	else
		for var in $* ; do
			if [ -n "${!var}" ] ; then
				echo "$var=${!var}; export $var;"
			fi
		done
	fi
}

function help() {
	cat <<-EOD >&2
	USAGE: ssh-agents [-h|--help] [-d|--debug] [-n|--name] [-v|--version]

	Start or load an already existing SSH agent. The default name is global and
	the agent state will be saved at ${HOME}/.ssh/agent and all the keys directly
	under ${HOME}/.ssh will be added automatically, provided they are not
	encrypted!

	Changing the SSH agent name with the flag -n or --name, would put the agent
	under ${HOME}/.ssh/${SSH_AGENT_NAME}/agent and all the keys directly under
	${HOME}/.ssh/${SSH_AGENT_NAME} will be added automatically, provided they are
	not encrypted!
	EOD
}

debug=false
agent_name=global

while [[ $# -ge 1 ]]; do
	case "${1}" in
		-h|--help)
			help
			exit 0
			;;
		-v|--version)
			echo "ssh-agents v${version}"
			exit 0
			;;
		-d|--debug)
			debug=true
			shift
			;;
		-n|--name)
			shift
			if [[ "${#}" -eq 0 ]]; then
				>&2 echo "ERR: --name requires an argument"
				exit 1
			fi
			agent_name="${1}"
			shift
			;;
		*)
			echo "${1} is given but is not supported"
			exit 1
	esac
done

# Forget any currently running agent
unset SSH_AGENT_NAME SSH_AGENT_PID SSH_AUTH_SOCK

# no SSH_AGENT_NAME? Hardcode it to global
readonly SSH_AGENT_NAME="${agent_name}"

# compute the path of ssh agent file
if [[ "${SSH_AGENT_NAME}" == "global" ]]; then
	readonly SSH_AGENT_FILE="${HOME}/.ssh/agent"
else
	readonly SSH_AGENT_FILE="${HOME}/.ssh/${SSH_AGENT_NAME}/agent"
fi
if [[ ! -w "$( dirname "${SSH_AGENT_FILE}" )" ]]; then
	# do not spawn an agent if we cannot write to the base directory of the
	# ssh agent file.
	exit
fi

# start the SSH agent (noop if it's already started)
start_ssh_agent

# export the variables required to access the SSH agent
export_env SSH_AGENT_NAME SSH_AGENT_PID SSH_AUTH_SOCK
